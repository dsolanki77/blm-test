{"version":3,"sources":["BadgesOutput.js","ATFilters.js","Home.js","NavBar.js","fullList.js","submitEntry.js","App.js","serviceWorker.js","index.js"],"names":["BadgesOutput","this","props","BadgesData","LegendCheck","map","badge","index","key","data-name","onClick","e","clickAction","CatName","className","CatID","toLowerCase","split","join","replace","Component","ATFilters","passingBadges","TypeOfActionCat","IntersectionalityCat","SubtopicCat","RecAudienceCat","TypeOfActionTags","IntersectionalityTags","SubtopicTags","RecAudienceTags","airtableData","card","fields","TypeOfAction","element","indexOf","push","Intersectionality","Subtopic","RecAudience","class","scope","id","Home","fullAirtableCards","masterFilterListner","cat","console","log","target","dataset","name","setState","prevState","combinedFilters","activatedBadges","Starter","state","StarterCat","multiPropsFilter","cards","filters","filter","filterKeys","Object","keys","every","length","Array","isArray","some","keyEle","includes","bind","filteredCards","Article","Book","Movie","Podcast","Healthcare","Immigration","Policing","Kids","Teens","Parents","fetch","then","resp","json","data","records","catch","err","alert","resetBadges","forEach","i","resetFilters","type","starterSelect","FadeInDiv","resource","React","useState","isVisible","setVisible","domRef","useRef","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","observe","current","unobserve","ref","children","ResourceCard","Title","Link","ShortDescription","ImageURL","href","src","alt","aria-expanded","data-toggle","aria-controls","Navigation","data-target","aria-label","exact","activeClassName","to","fullList","frameborder","onmousewheel","submitEntry","App","path","component","homePage","listPage","submitPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8RA8BeA,E,uKA3BD,IAAD,OAEL,OAAGC,KAAKC,MAAMC,WACPF,KAAKC,MAAME,YACHH,KAAKC,MAAMC,WAAWE,KAAI,SAACC,EAAOC,GAAR,OACjC,kBAAC,WAAD,KAEI,0BAAMC,IAAKD,EACXE,YAAWH,EACXI,QAAS,SAAAC,GAAC,OAAI,EAAKT,MAAMU,YAAYD,EAAG,EAAKT,MAAMW,UACnDC,UAAW,qBAAwB,EAAKZ,MAAMa,MAAMT,GAAU,uBAAyB,0BAA4B,cAAgBA,EAAMU,cAAcC,MAAM,KAAKC,KAAK,KAAKC,QAAQ,IAAI,SACnLb,GAEJ,QAIEL,KAAKC,MAAMC,WAAWE,KAAI,SAACC,EAAOC,GAAR,OAC7B,0BAAMC,IAAKD,EAAOO,UAAW,8BAAgCR,EAAMU,cAAcC,MAAM,KAAKC,KAAK,KAAKC,QAAQ,IAAI,SAAUb,MAI7H,S,GAvBQc,aCkGZC,E,uKA/FH,MAGqEpB,KAAKC,MAAMoB,cAAjFC,EAHC,EAGDA,gBAAiBC,EAHhB,EAGgBA,qBAAsBC,EAHtC,EAGsCA,YAAaC,EAHnD,EAGmDA,eAGrDC,EAAkB,GAClBC,EAAwB,GACxBC,EAAe,GACfC,EAAkB,GAsCxB,OArCA7B,KAAKC,MAAM6B,aAAa1B,KAAI,SAAA2B,GAE5BA,EAAKC,OAAOC,aAAa7B,KAAI,SAAA8B,IACe,IAAvCR,EAAiBS,QAAQD,IAE1BR,EAAiBU,KAAKF,MAIvBH,EAAKC,OAAOK,mBACbN,EAAKC,OAAOK,kBAAkBjC,KAAI,SAAA8B,IACe,IAA5CP,EAAsBQ,QAAQD,IAE/BP,EAAsBS,KAAKF,MAK9BH,EAAKC,OAAOM,UACbP,EAAKC,OAAOM,SAASlC,KAAI,SAAA8B,IACe,IAAnCN,EAAaO,QAAQD,IAEtBN,EAAaQ,KAAKF,MAKrBH,EAAKC,OAAOO,aACbR,EAAKC,OAAOO,YAAYnC,KAAI,SAAA8B,IACe,IAAtCL,EAAgBM,QAAQD,IAEzBL,EAAgBO,KAAKF,SAOzB,kBAAC,WAAD,KACI,yBAAKrB,UAAU,OACb,yBAAK2B,MAAM,oBACX,2BAAO3B,UAAU,kDACf,+BACE,4BACE,wBAAI4B,MAAM,OAAV,+CAGA,wBAAIC,GAAG,uBACL,kBAAC,EAAD,CAAcxC,WAAcwB,EAAkBvB,aAAe,EAAMW,MAAOQ,EAAiBV,QAAS,kBAAmBD,YAAaX,KAAKC,MAAMU,gBAGnJ,4BACE,wBAAI8B,MAAM,OAAV,6CAGA,wBAAIC,GAAG,4BACL,kBAAC,EAAD,CAAcxC,WAAcyB,EAAuBxB,aAAe,EAAMW,MAAOS,EAAsBX,QAAS,uBAAwBD,YAAaX,KAAKC,MAAMU,gBAGlK,4BACE,wBAAI8B,MAAM,OAAV,wCAGA,wBAAIC,GAAG,mBACL,kBAAC,EAAD,CAAcxC,WAAc0B,EAAczB,aAAe,EAAMW,MAAOU,EAAaZ,QAAS,cAAeD,YAAaX,KAAKC,MAAMU,gBAGvI,4BACE,wBAAI8B,MAAM,OAAV,mCAGA,wBAAIC,GAAG,sBACL,kBAAC,EAAD,CAAcxC,WAAc2B,EAAiB1B,aAAe,EAAMW,MAAOW,EAAgBb,QAAS,iBAAkBD,YAAaX,KAAKC,MAAMU,yB,GApFxIQ,aCoOTwB,G,wDAhOb,WAAY1C,GAAQ,IAAD,8BAEjB,cAAMA,IAyDR2C,kBAAoB,GA3DD,EA0EnBC,oBAAsB,SAACnC,EAAGoC,GACxBC,QAAQC,IAAI,iBAAkBtC,EAAEuC,OAAOC,QAAQC,MAC/C,IAAMA,EAAOzC,EAAEuC,OAAOC,QAAQC,KAC9B,EAAKC,UAAS,SAAAC,GAAS,YAAK,CACxBhC,cAAc,2BACPgC,EAAUhC,eADJ,uBAERyB,EAFQ,2BAGFO,EAAUhC,cAAcyB,IAHtB,kBAIJK,GAAQE,EAAUhC,cAAcyB,GAAKK,MAJjC,cAMR,cAAe,GANP,SA9EA,EA0FrBG,gBAAkB,WAChB,IAAMC,EAAkB,CACtBtB,aAAc,GACdI,kBAAmB,GACnBC,SAAU,GACVC,YAAa,GACbiB,SAAS,GANW,EASwD,EAAKC,MAAMpC,cAAjFC,EATc,EASdA,gBAAiBC,EATH,EASGA,qBAAsBC,EATzB,EASyBA,YAAaC,EATtC,EASsCA,eAG5D,IAAK,IAAIlB,KAAOe,EACXA,EAAgBf,IACjBgD,EAAgBtB,aAAaG,KAAK7B,GAGtC,IAAK,IAAIA,KAAOgB,EACXA,EAAqBhB,IACtBgD,EAAgBlB,kBAAkBD,KAAK7B,GAG3C,IAAK,IAAIA,KAAOiB,EACXA,EAAYjB,IACbgD,EAAgBjB,SAASF,KAAK7B,GAGlC,IAAK,IAAIA,KAAOkB,EACXA,EAAelB,IAChBgD,EAAgBhB,YAAYH,KAAK7B,GAMrC,OAFAgD,EAAgBC,QAAU,EAAKC,MAAMpC,cAAcqC,WAE5CH,GA7HY,EAiIrBI,iBAAmB,SAACC,EAAOC,GAGzB,GAAIA,EAAO,QACT,OAAOD,EAAME,QAAO,SAAA/B,GAAI,OAAIA,EAAKC,OAAL,WAG9B,IAAM+B,EAAaC,OAAOC,KAAKJ,GAC/B,OAAOD,EAAME,QAAO,SAAA/B,GAClB,OAAOgC,EAAWG,OAAM,SAAA3D,GACtB,OAAKsD,EAAQtD,GAAK4D,SAGdC,MAAMC,QAAQtC,EAAKC,OAAOzB,IACrBwB,EAAKC,OAAOzB,GAAK+D,MAAK,SAAAC,GAAM,OAAIV,EAAQtD,GAAKiE,SAASD,MAExDV,EAAQtD,GAAKiE,SAASzC,EAAKC,OAAOzB,YA5I3C,EAAKsC,oBAAsB,EAAKA,oBAAoB4B,KAAzB,gBAG3B,EAAKhB,MAAQ,CACXiB,cAAe,GACfrD,cAAc,CACZC,gBAAiB,CACf,gBAAgB,EAChBqD,SAAS,EACTC,MAAM,EACN,kBAAkB,EAClBC,OAAO,EACP,eAAe,EACfC,SAAS,EACT,eAAe,EACf,sBAAsB,EACtB,aAAa,EACb,UAAY,EACZ,kBAAkB,EAClB,uBAAuB,GAEzBvD,qBAAsB,CACpB,UAAU,EACV,UAAY,EACZ,qBAAqB,EACrB,eAAe,GAEjBC,YAAa,CACXuD,YAAY,EACZ,oBAAoB,EACpBC,aAAa,EACb,iBAAiB,EACjB,uBAAuB,EACvB,yBAAyB,EACzB,gBAAgB,EAChB,uBAAuB,EACvB,2BAA2B,EAC3B,iBAAiB,EACjB,WAAa,EACb,cAAc,EACdC,UAAU,GAEZxD,eAAgB,CACdyD,MAAM,EACN,gBAAgB,EAChBC,OAAO,EACPC,SAAS,GAEX1B,YAAY,IArDC,E,gEA8DE,IAAD,OAClB2B,MAAM,0FACLC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAAG,GACJ,EAAK7C,kBAAoB6C,EAAKC,QAC9B,EAAKtC,SAAS,CAAEsB,cAAee,EAAKC,aACnCC,OAAM,SAAAC,GACPC,MAAM,wD,qCAmFV,IAAMC,EAAW,eAAO9F,KAAKyD,MAAMpC,eAGnC2C,OAAOC,KAAK6B,GAAaC,SAAQ,SAAAjD,GAGnB,eAARA,EACFgD,EAAYhD,IAAO,EAIjBkB,OAAOC,KAAK6B,EAAYhD,IAAMiD,SAAQ,SAAAC,GAAC,OAAIF,EAAYhD,GAAKkD,IAAK,QAIvEhG,KAAKoD,SACD,CAAC/B,cAAeyE,M,sCAOpB9F,KAAKiG,eAGL,IAAMH,EAAW,eAAO9F,KAAKyD,MAAMpC,eAEnCyE,EAAYpC,YAAa,EAEzB1D,KAAKoD,SACH,CAAC/B,cAAeyE,M,+BAKR,IAAD,OAEP,OAAiC,OAA7B9F,KAAKyD,MAAMiB,cAA+B,KAK9C,yBAAK7D,UAAU,kBACX,+CAAoB,2BAAQA,UAAU,qBAAlB,oEAEtB,yBAAKA,UAAU,iBAEb,kBAAC,EAAD,CAASiB,aAAgB9B,KAAK4C,kBAAmBvB,cAAiBrB,KAAKyD,MAAMpC,cAAeV,YAAeX,KAAK6C,sBAEhH,yBAAKhC,UAAU,mBACX,yBAAKA,UAAU,YACb,4BAAQqF,KAAK,SAASrF,UAAU,uBAAuBJ,QAAS,kBAAM,EAAK0F,iBAAiBzD,GAAG,KAA/F,0BAEA,4BAAQwD,KAAK,SAASrF,UAAU,yBAAyBJ,QAAS,kBAAM,EAAKwF,gBAAgBvD,GAAG,KAAhG,YAKR,kBAAC0D,EAAD,KACE,wBAAIvF,UAAU,QAAd,gCAAkD,2BAAQA,UAAU,qBAAlB,0CAGpD,yBAAKA,UAAU,iDACZb,KAAK2D,iBAAiB3D,KAAK4C,kBAAkB5C,KAAKsD,mBAAmBlD,KAAI,SAAAiG,GAAQ,OAAG,kBAAC,EAAiBA,EAASrE,iB,GA1NrGb,cAqOnB,SAASiF,EAAUnG,GAAO,MAGSqG,IAAMC,UAAS,GAHxB,mBAGhBC,EAHgB,KAGLC,EAHK,KAIhBC,EAASJ,IAAMK,OAAO,MAc5B,OAXAL,IAAMM,WAAU,WACd,IAAMC,EAAW,IAAIC,sBAAqB,SAAAC,GACxCA,EAAQhB,SAAQ,SAAAiB,GAAK,OAAGP,EAAWO,EAAMC,sBAM3C,OAFAJ,EAASK,QAAQR,EAAOS,SAEjB,kBAAMN,EAASO,UAAUV,EAAOS,aAIvC,yBAAKE,IAAKX,EAAQ7F,UAAW,mBAAoB2F,EAAY,aAAe,KAAMvG,EAAMqH,UAI9F,IAAMC,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOvF,EAAT,EAASA,aAAcwF,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,iBAAkBrF,EAA/C,EAA+CA,kBAAmBE,EAAlE,EAAkEA,YAAaiB,EAA/E,EAA+EA,QAASlB,EAAxF,EAAwFA,SAAUqF,EAAlG,EAAkGA,SAAUjF,EAA5G,EAA4GA,GAA5G,OACrB,kBAAC0D,EAAD,CAAW7F,IAAKmC,GAGd,yBAAK7B,UAAW,8BAA+BoB,EAAa,GAAGlB,cAAcC,MAAM,KAAKC,KAAK,KAAKC,QAAQ,IAAI,SAC5G,uBAAG0G,KAAMH,EAAMxE,OAAO,UACpB,yBAAKpC,UAAU,eAAegH,IAAKF,EAAUG,IAAK,uBAAwB,CAACN,YAG7E,yBAAK3G,UAAU,aACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,cAAc2G,EAAQ,IAElC,2BAAO3G,UAAW,qBAAuB2C,EAAU,GAAK,WAAxD,cAIJ,yBAAK3C,UAAW,2BAA8B6G,EAAiBvD,OAAS,IAAO,GAAK,0BAC9E,uBAAGtD,UAAU,qBAAqB6B,GAAI,qBAAqBA,EAAIqF,gBAAe,SAASL,GAC3F,uBAAGE,KAAM,sBAAsBlF,EAAIsF,cAAY,WAAWnH,UAAU,YAAYkH,gBAAc,QAAQE,gBAAc,sBAClH,0BAAMpH,UAAU,YAAhB,cACA,0BAAMA,UAAU,YAAhB,gBAKF,yBAAKA,UAAW,oBAAuB6G,EAAiBvD,OAAS,IAAO,UAAY,sBAChF,uBAAGtD,UAAU,aAAa6G,IA4BhC,yBAAK7G,UAAU,mCACb,yBAAKA,UAAU,4CAEb,0BAAMA,UAAU,qBAAhB,gBAAiD,6BAAjD,QAA2D,8BAC3D,0BAAMA,UAAU,qBAAhB,oBAAqD,8BAErD,kBAAC,EAAD,CAAcX,WAAcmC,EAAmBlC,aAAe,KAEhE,yBAAKU,UAAU,+BACb,wCACA,kBAAC,EAAD,CAAcX,WAAcoC,EAAUnC,aAAe,KAEvD,yBAAKU,UAAU,8BACb,2CACA,kBAAC,EAAD,CAAcX,WAAc+B,EAAc9B,aAAe,KAE3D,yBAAKU,UAAU,YACb,4CACA,kBAAC,EAAD,CAAcX,WAAcqC,EAAapC,aAAe,U,eCzSnD+H,EA9BI,kBACX,yBAAKrH,UAAU,iEACX,yBAAKA,UAAU,aACf,uBAAGA,UAAU,2BAA2B+G,KAAK,KAA7C,yBACA,4BAAQ/G,UAAU,iBAAiBqF,KAAK,SAAS8B,cAAY,WAAWG,cAAY,0BAA0BF,gBAAc,yBAAyBF,gBAAc,QAAQK,aAAW,qBAClL,0BAAMvH,UAAU,yBAIpB,yBAAKA,UAAU,2BAA2B6B,GAAG,0BAEzC,wBAAI7B,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASwH,OAAK,EAACC,gBAAgB,SAASzH,UAAU,WAAW0H,GAAG,KAAhE,SAEJ,wBAAI1H,UAAU,YACV,kBAAC,IAAD,CAASyH,gBAAgB,SAASzH,UAAU,WAAW0H,GAAG,aAA1D,qBAIR,wBAAI1H,UAAU,cACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,kBAAkB0H,GAAG,gBAAxC,yBCLTC,E,uKAhBP,OACA,yBAAK3H,UAAY,kBACb,yBAAKA,UAAU,OACX,oDACI,2BAAO2B,MAAM,qBAAb,wDAEA,0GAA+E,uBAAGoF,KAAK,gBAAR,2BAEvF,yBAAK/G,UAAU,OACf,4BAAQA,UAAU,qCAAqCgH,IAAI,oFAAoFY,YAAY,IAAIC,aAAa,W,GAXjKpC,IAAMnF,WCiBdwH,E,uKAfP,OACI,yBAAK9H,UAAU,kBACX,yBAAKA,UAAU,OACX,2DACA,kLAEJ,yBAAKA,UAAU,OACX,4BAAQgH,IAAI,6DAAoE,4BAAQrF,MAAM,4DAA4DqF,IAAI,oEAAoEY,YAAY,IAAIC,aAAa,W,GATzPpC,IAAMnF,WCwBjByH,E,uKAhBX,OAEE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,OAAK,EAACQ,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,IACnC,kBAAC,IAAD,CAAOH,KAAK,eAAeC,UAAWG,U,GAV9B9H,aCIE+H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdrE,OAAM,SAAAsE,GACLlH,QAAQkH,MAAMA,EAAMC,c","file":"static/js/main.702e7046.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\r\n\r\nclass BadgesOutput extends Component {\r\n    render() {\r\n        //first check if null\r\n        if(this.props.BadgesData) {\r\n            if(this.props.LegendCheck) {\r\n                return this.props.BadgesData.map((badge, index) => (\r\n                <Fragment>\r\n                    {/*CSSify the badge name to call a pre-named class for coloring and state for selecting and then display the badge */}\r\n                    <span key={index}\r\n                    data-name={badge}\r\n                    onClick={e => this.props.clickAction(e, this.props.CatName)}\r\n                    className={\"badge badge-pill \" + ((this.props.CatID[badge]) ? \"legend-button-active\" : \"legend-button-inactive\") + \" text-wrap \" + badge.toLowerCase().split(\" \").join(\"-\").replace(\"+\",\"plus\")}>\r\n                        {badge}\r\n                    </span>\r\n                    {\" \"}\r\n                </Fragment>\r\n                ));\r\n            } else {\r\n                return this.props.BadgesData.map((badge, index) => (\r\n                    <span key={index} className={\"badge badge-pill text-wrap \" + badge.toLowerCase().split(\" \").join(\"-\").replace(\"+\",\"plus\")}>{badge}</span>\r\n                ));\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default BadgesOutput;","import React, {Component, Fragment} from 'react';\r\nimport BadgesOutput from './BadgesOutput';\r\n\r\nclass ATFilters extends Component {\r\n\r\n  render () {\r\n    \r\n    //get the current state of each tag from the main constructor using object deconstructing\r\n    const {TypeOfActionCat, IntersectionalityCat, SubtopicCat, RecAudienceCat} = this.props.passingBadges;\r\n\r\n    //get unique tags to pass through to form filters\r\n    const TypeOfActionTags =[];\r\n    const IntersectionalityTags = [];\r\n    const SubtopicTags = [];\r\n    const RecAudienceTags = [];\r\n    this.props.airtableData.map(card => {\r\n\r\n    card.fields.TypeOfAction.map(element => {\r\n      if(TypeOfActionTags.indexOf(element) === -1)\r\n      {\r\n        TypeOfActionTags.push(element)\r\n      }        \r\n    });\r\n\r\n    if(card.fields.Intersectionality) {\r\n      card.fields.Intersectionality.map(element => {\r\n        if(IntersectionalityTags.indexOf(element) === -1)\r\n        {\r\n          IntersectionalityTags.push(element)\r\n        }        \r\n      });\r\n    }\r\n    \r\n    if(card.fields.Subtopic) {\r\n      card.fields.Subtopic.map(element => {\r\n        if(SubtopicTags.indexOf(element) === -1)\r\n        {\r\n          SubtopicTags.push(element)\r\n        }        \r\n      });\r\n    }\r\n    \r\n    if(card.fields.RecAudience) {\r\n      card.fields.RecAudience.map(element => {\r\n        if(RecAudienceTags.indexOf(element) === -1)\r\n        {\r\n          RecAudienceTags.push(element)\r\n        }        \r\n      });\r\n    }\r\n  });\r\n    \r\n    return (\r\n      <Fragment>\r\n          <div className=\"row\">\r\n            <div class=\"table-responsive\">\r\n            <table className=\"table table-bordered pill-matrix table-filters\">\r\n              <tbody>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    What content or action are you looking for?\r\n                  </th>\r\n                  <td id=\"filter-TypeOfAction\">\r\n                    <BadgesOutput BadgesData = {TypeOfActionTags} LegendCheck = {true} CatID={TypeOfActionCat} CatName={\"TypeOfActionCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    What intersections are you curious about?\r\n                  </th>\r\n                  <td id=\"filter-Intersectionality\">\r\n                    <BadgesOutput BadgesData = {IntersectionalityTags} LegendCheck = {true} CatID={IntersectionalityCat} CatName={\"IntersectionalityCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    What other issues are important you?\r\n                  </th>\r\n                  <td id=\"filter-Subtopic\">\r\n                    <BadgesOutput BadgesData = {SubtopicTags} LegendCheck = {true} CatID={SubtopicCat} CatName={\"SubtopicCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    Who are you looking to educate?\r\n                  </th>\r\n                  <td id=\"filter-RecAudience\">\r\n                    <BadgesOutput BadgesData = {RecAudienceTags} LegendCheck = {true} CatID={RecAudienceCat} CatName={\"RecAudienceCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            </div>\r\n          </div>\r\n      </ Fragment>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default ATFilters;","import React, { Component } from 'react';\r\nimport BadgesOutput from './BadgesOutput';\r\nimport Filters from './ATFilters';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Home extends Component {\r\n\r\n  constructor(props) {\r\n    //initial constructor to take in input from airtable API...starts as blank\r\n    super(props);\r\n\r\n    //bind masterFilterListner so it can access state and props\r\n    this.masterFilterListner = this.masterFilterListner.bind(this);\r\n    \r\n    //set state to include booleans for all badges\r\n    this.state = {\r\n      filteredCards: [],\r\n      passingBadges:{\r\n        TypeOfActionCat: {\r\n          \"Action Guide\": false,\r\n          Article: false,\r\n          Book: false,\r\n          \"Legal Services\": false,\r\n          Movie: false,\r\n          \"News Source\": false,\r\n          Podcast: false,\r\n          \"Short Video\": false,\r\n          \"Support Businesses\": false,\r\n          \"TV series\": false,\r\n          \"Donation\": false,\r\n          \"academic Paper\": false,\r\n          \"Structured Learning\": false,\r\n        },\r\n        IntersectionalityCat: {\r\n          \"LGBTQ+\": false,\r\n          \"Feminist\": false,\r\n          \"Indigenous Rights\": false,\r\n          \"South Asian\": false\r\n        },\r\n        SubtopicCat: {\r\n          Healthcare: false,\r\n          \"Criminal Justice\": false,\r\n          Immigration: false,\r\n          \"Voting Rights\": false,\r\n          \"Economic Inequality\": false,\r\n          \"Environmental Justice\": false,\r\n          \"Labor Rights\": false,\r\n          \"Reproductive Rights\": false,\r\n          \"Sexual Assault and Rape\": false,\r\n          \"Mental Health\": false,\r\n          \"Education\": false,\r\n          \"Bail Funds\": false,\r\n          Policing: false\r\n        },\r\n        RecAudienceCat: {\r\n          Kids: false,\r\n          \"Young Adults\": false,\r\n          Teens: false,\r\n          Parents: false\r\n        },\r\n        StarterCat: false\r\n      }\r\n    };\r\n  }\r\n\r\n  //Store all cards for future callbacks and toggling\r\n  fullAirtableCards = [];\r\n\r\n  //fetch all records from airtable DB using read-only API-key\r\n  componentDidMount() {\r\n    fetch('https://api.airtable.com/v0/appAPRM3pAfHUj3LP/Raw%20Database?api_key=keycv2X09Q0ghqQfu')\r\n    .then((resp) => resp.json())\r\n    .then(data => {\r\n      this.fullAirtableCards = data.records;\r\n      this.setState({ filteredCards: data.records});\r\n    }).catch(err => {\r\n      alert(\"There was an error pulling from the airtable DB\")\r\n    })\r\n  }\r\n\r\n  //function to edit boolean values on click of any badges\r\n  masterFilterListner = (e, cat) => {\r\n    console.log(\"Filter clicked\", e.target.dataset.name)\r\n    const name = e.target.dataset.name;\r\n    this.setState(prevState => ({\r\n        passingBadges: {\r\n            ...prevState.passingBadges,\r\n            [cat]: {\r\n                ...prevState.passingBadges[cat],\r\n                [name]: !prevState.passingBadges[cat][name]\r\n            },\r\n            [\"StarterCat\"]: false\r\n        }\r\n    }));\r\n};\r\n\r\n//function that combines all boolean values to use on filtering\r\ncombinedFilters = () => {\r\n  const activatedBadges = {\r\n    TypeOfAction: [],\r\n    Intersectionality: [],\r\n    Subtopic: [],\r\n    RecAudience: [],\r\n    Starter: false\r\n  };\r\n\r\n  const { TypeOfActionCat, IntersectionalityCat, SubtopicCat, RecAudienceCat} = this.state.passingBadges;\r\n\r\n  //pull out the keys, which are the actual badge names, for anything that is true\r\n  for (let key in TypeOfActionCat) {\r\n    if(TypeOfActionCat[key]) {\r\n      activatedBadges.TypeOfAction.push(key);\r\n    }\r\n  };\r\n  for (let key in IntersectionalityCat) {\r\n    if(IntersectionalityCat[key]) {\r\n      activatedBadges.Intersectionality.push(key);\r\n    }\r\n  };\r\n  for (let key in SubtopicCat) {\r\n    if(SubtopicCat[key]) {\r\n      activatedBadges.Subtopic.push(key);\r\n    }\r\n  };\r\n  for (let key in RecAudienceCat) {\r\n    if(RecAudienceCat[key]) {\r\n      activatedBadges.RecAudience.push(key);\r\n    }\r\n  };\r\n\r\n  activatedBadges.Starter = this.state.passingBadges.StarterCat;\r\n\r\n  return activatedBadges;\r\n\r\n}\r\n\r\nmultiPropsFilter = (cards, filters) => {\r\n\r\n  //special case if starter button is selected\r\n  if (filters[\"Starter\"]) {\r\n    return cards.filter(card =>(card.fields[\"Starter\"]))\r\n  }\r\n  //normal iteration through different selector tags\r\n  const filterKeys = Object.keys(filters);\r\n  return cards.filter(card => {\r\n    return filterKeys.every(key => {\r\n      if (!filters[key].length) return true;\r\n\r\n      // Loops again if card[key] is an array (as is the case for almost all criteria)\r\n      if (Array.isArray(card.fields[key])) {\r\n        return card.fields[key].some(keyEle => filters[key].includes(keyEle));\r\n      }\r\n      return filters[key].includes(card.fields[key]);\r\n    });\r\n  });\r\n};\r\n\r\nresetFilters() {\r\n\r\n  const resetBadges = {...this.state.passingBadges}\r\n\r\n  //set temp variable to all false\r\n  Object.keys(resetBadges).forEach(cat => {\r\n    \r\n    //starter is the only non-array cat, so avoid the double iteration there\r\n    if (cat === \"StarterCat\") {\r\n      resetBadges[cat] = false;\r\n    \r\n    //iterate to nested properties and set to 0\r\n    } else {\r\n        Object.keys(resetBadges[cat]).forEach(i => resetBadges[cat][i] = false)\r\n    }\r\n  })\r\n\r\n  this.setState(\r\n      {passingBadges: resetBadges}\r\n    );\r\n}\r\n\r\nstarterSelect() {\r\n\r\n  //remove any filters first\r\n  this.resetFilters()\r\n\r\n  //set up copy variable\r\n  const resetBadges = {...this.state.passingBadges}\r\n\r\n  resetBadges.StarterCat = true;\r\n\r\n  this.setState(\r\n    {passingBadges: resetBadges}\r\n  );\r\n  \r\n}\r\n\r\n  render() {\r\n    //prevents rendering too early\r\n    if (this.state.filteredCards === null) return null;\r\n\r\n    return (\r\n\r\n    //begin filter section\r\n    <div className=\"container mt-5\">\r\n        <h1>Build your plan <small  className=\"text-muted vsmall\">Click on any tag to filter, use our starter kit, or just scroll</small></h1>\r\n      \r\n      <div className=\"cotainer mb-3\">\r\n        \r\n        <Filters airtableData = {this.fullAirtableCards} passingBadges = {this.state.passingBadges} clickAction = {this.masterFilterListner} />\r\n        \r\n        <div className=\"btn-toolbar row\">\r\n            <div className=\"offset-4\">\r\n              <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={() => this.starterSelect()} id=\"#\">Show me some starters!</button>   \r\n\r\n              <button type=\"button\" className=\"btn btn-secondary mx-1\" onClick={() => this.resetFilters()} id=\"#\">Reset</button>\r\n            </div>\r\n          </div>\r\n      </div>\r\n\r\n      <FadeInDiv>\r\n        <h1 className=\"mt-5\">Resources to educate and act <small  className=\"text-muted vsmall\">Click on any image to go to the site</small></h1>\r\n      </FadeInDiv>\r\n\r\n      <div className=\"row row-cols-1 row-cols-lg-4 card-matrix mt-4\">\r\n        {this.multiPropsFilter(this.fullAirtableCards,this.combinedFilters()).map(resource =><ResourceCard {...resource.fields} />)}\r\n      </div>\r\n    \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n//add fading effects to any div on view\r\nfunction FadeInDiv(props) {\r\n\r\n    //set variables to capture visibility state\r\n    const[isVisible, setVisible] = React.useState(false);\r\n    const domRef = React.useRef(null);\r\n  \r\n    //instantize new observer for each element and trigger it when there is some change to the dom\r\n    React.useEffect(() => {\r\n      const observer = new IntersectionObserver(entries => {\r\n        entries.forEach(entry =>setVisible(entry.isIntersecting));\r\n      });\r\n\r\n      //observe the change in the dom\r\n      observer.observe(domRef.current);\r\n      //unmount observer after the change is dom\r\n      return () => observer.unobserve(domRef.current);\r\n    });\r\n  \r\n    return (\r\n      <div ref={domRef} className={\"col mb-4 fader \"+ (isVisible ? \"is-visible\" : \"\")}>{props.children}</div>\r\n    );\r\n  }\r\n\r\nconst ResourceCard = ({Title, TypeOfAction, Link, ShortDescription, Intersectionality, RecAudience, Starter, Subtopic, ImageURL, id}) => (\r\n<FadeInDiv key={id}>\r\n\r\n  {/* Each type of action has been coded to a particular card color...grab the color of the first type of action that comes up*/}\r\n  <div className={\"card h-100 card-highlights \"+(TypeOfAction[0].toLowerCase().split(\" \").join(\"-\").replace(\"+\",\"plus\"))}>\r\n    <a href={Link} target=\"_blank\">\r\n      <img className=\"card-img-top\" src={ImageURL} alt={\"Website preview for \"+ {Title}} />\r\n    </a>\r\n\r\n    <div className=\"card-body\">\r\n      <div className=\"height-setter\">\r\n        <h5 className=\"card-title\">{Title + \" \"}\r\n          {/* Apply starter badge if starter is checked */}\r\n          <small className={\"badge badge-dark \" + (Starter ? \"\" : \"d-none\")}> STARTER</small>\r\n        </h5>\r\n      </div>\r\n      {/* Collapsable version (show only if text is long enough and screen size is big enough) */}\r\n      <div className={\"descriptionText d-none \" + ((ShortDescription.length < 106) ? \"\" : \"d-lg-block d-xl-block\")}>\r\n            <p className=\"card-text collapse\" id={\"descriptionContent\"+id} aria-expanded= \"false\">{ShortDescription}</p>\r\n        <a href={\"#descriptionContent\"+id} data-toggle=\"collapse\" className=\"collapsed\" aria-expanded=\"false\" aria-controls=\"descriptionContent\">\r\n          <span className=\"readMore\">+Show More</span>\r\n          <span className=\"readLess\">-Show Less</span>\r\n        </a>\r\n      </div>\r\n\r\n        {/* Full version (show if text is short and/or screen size is iPad  or lower) */}\r\n        <div className={\"descriptionText \" + ((ShortDescription.length < 106) ? \"d-block\" : \"d-block d-lg-none\")}>\r\n            <p className=\"card-text\">{ShortDescription}</p>\r\n        </div>\r\n\r\n\r\n      {/* <div className=\"pill-matrix pt-3\">\r\n        <div class=\"border-top pt-1 border-bottom\">\r\n          <p class=\"font-weight-bold\">Intersectionality: {\"  \"} \r\n          <BadgesOutput BadgesData = {Intersectionality} LegendCheck = {false} />\r\n          </p>\r\n        </div>\r\n        <div class=\"pt-1 border-bottom\">\r\n          <p class=\"font-weight-bold\">Subtopic: {\"  \"} \r\n          <BadgesOutput BadgesData = {Subtopic} LegendCheck = {false} />\r\n          </p>\r\n        </div>\r\n        <div class=\"pt-1 border-bottom\">\r\n          <p class=\"font-weight-bold\">Action Type: {\"  \"} \r\n          <BadgesOutput BadgesData = {TypeOfAction} LegendCheck = {false} />\r\n          </p>\r\n        </div>\r\n        <div class=\"pt-1 border-bottom\">\r\n          <p class=\"font-weight-bold\">Rec. Audience: {\"  \"} \r\n          <BadgesOutput BadgesData = {RecAudience} LegendCheck = {false} />\r\n          </p>\r\n        </div>\r\n      </div> */}\r\n\r\n\r\n      <div className=\"row p-3 text-center pill-matrix\">\r\n        <div className=\"col-sm-6 pb-3 border-right border-bottom\">\r\n          {/* Annoying fix due to the length of the word intersectionality */}\r\n          <span className=\"d-none d-lg-block\">Intersection-<br/>ality<br /></span>\r\n          <span className=\"d-block d-lg-none\">Intersectionality<br/></span>\r\n          {/*loop through string array to find all of the badges for each section, and add each badge with the right coloring */}\r\n          <BadgesOutput BadgesData = {Intersectionality} LegendCheck = {false} />\r\n        </div>\r\n        <div className=\"col-sm-6 pb-3 border-bottom\">\r\n          <p>Subtopics</p>\r\n          <BadgesOutput BadgesData = {Subtopic} LegendCheck = {false} />\r\n        </div>\r\n        <div className=\"col-sm-6 border-right pr-3\">\r\n          <p>Action Types</p>\r\n          <BadgesOutput BadgesData = {TypeOfAction} LegendCheck = {false} />\r\n        </div>\r\n        <div className=\"col-sm-6\">\r\n          <p>Rec. Audience</p>\r\n          <BadgesOutput BadgesData = {RecAudience} LegendCheck = {false} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</FadeInDiv>);\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navigation = () => (\r\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-light bg-nav-custom\">\r\n            <div className=\"container\">\r\n            <a className=\"navbar-brand font-italic\" href=\"/\">An Antiracism Project</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            {/* use NavLink to allow for activeClass to change depending on what page we are on */}\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                {/* left-align these components with mr-auto */}\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/\">Home</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to=\"/fullList\">Full Data Table</NavLink>\r\n                    </li>\r\n                </ul>\r\n                    {/* Make this stand out as another button */}\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"btn btn-primary\" to=\"/submitEntry\">Submit an Entry</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            </div>\r\n        </nav>\r\n)\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\nclass fullList extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className = \"container mt-5\">\r\n            <div className=\"row\">\r\n                <h1>Explore all resources \r\n                    <small class=\"vsmall text-muted\">  Airtable only lets us show 100 on our homepage :(</small>\r\n                </h1>\r\n                    <p>These are all the resources categorized to date.  Help us out by submitting <a href=\"/submitEntry\">other recommendations</a></p>\r\n            </div>\r\n            <div className=\"row\">\r\n            <iframe className=\"airtable-embed airTable-embed-view\" src=\"https://airtable.com/embed/shrcTZxNFB1e55pen?backgroundColor=blue&viewControls=on\" frameborder=\"0\" onmousewheel=\"\"></iframe>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default fullList;","import React from \"react\";\r\n\r\nclass submitEntry extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <h1>Contribute to the community</h1>\r\n                    <p>This project was built by a community with the hopes of bringing together a better community. If you have suggestions, we'd love to hear from you!</p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <script src=\"https://static.airtable.com/js/embed/embed_snippet_v1.js\"></script><iframe class=\"airtable-embed airtable-dynamic-height airTable-form-view\" src=\"https://airtable.com/embed/shr0Mly7UD0cne35m?backgroundColor=blue\" frameborder=\"0\" onmousewheel=\"\"></iframe>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default submitEntry;","import React, { Component, Fragment } from 'react';\nimport homePage from './Home';\nimport {HashRouter, Link, Switch, Route} from 'react-router-dom';\nimport Navigation from './NavBar';\nimport listPage from './fullList.js';\nimport submitPage from './submitEntry';\nimport { render } from '@testing-library/react';\n\nclass App extends Component {\n  render () {\n    return (\n    //Navbar\n      <HashRouter>\n        <Navigation />\n\n        <Switch>\n          <Route exact path=\"/\" component={homePage} />\n          <Route path=\"/fullList\" component={listPage} />\n          <Route path=\"/submitEntry\" component={submitPage} />\n        </Switch>\n\n      </HashRouter>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//import Bootstrap 4.0\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/js/bootstrap.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}