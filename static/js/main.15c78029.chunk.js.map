{"version":3,"sources":["BadgesOutput.js","ATFilters.js","Home.js","NavBar.js","fullList.js","submitEntry.js","App.js","serviceWorker.js","index.js"],"names":["BadgesOutput","this","props","BadgesData","LegendCheck","map","badge","key","uuid","data-name","onClick","e","clickAction","CatName","className","CatID","toLowerCase","split","join","replace","Component","ATFilters","passingBadges","TypeOfActionCat","IntersectionalityCat","SubtopicCat","RecAudienceCat","TypeOfActionTags","IntersectionalityTags","SubtopicTags","RecAudienceTags","airtableData","card","fields","TypeOfAction","element","indexOf","push","Intersectionality","Subtopic","RecAudience","scope","id","Home","fullAirtableCards","masterFilterListner","cat","console","log","target","dataset","name","setState","prevState","combinedFilters","activatedBadges","Starter","state","StarterCat","multiPropsFilter","cards","filters","filter","filterKeys","Object","keys","every","length","Array","isArray","some","keyEle","includes","bind","filteredCards","Article","Book","Movie","Podcast","Healthcare","Immigration","Policing","Kids","Teens","Parents","fetch","then","resp","json","data","records","catch","err","alert","resetBadges","forEach","i","resetFilters","type","starterSelect","FadeInDiv","resource","React","useState","isVisible","setVisible","domRef","useRef","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","observe","current","unobserve","ref","children","ResourceCard","Title","Link","ShortDescription","ImageURL","Index","href","rel","src","alt","re","aria-expanded","data-toggle","aria-controls","Navigation","data-target","aria-label","exact","activeClassName","to","fullList","class","title","frameborder","onmousewheel","submitEntry","App","path","component","homePage","listPage","submitPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.15c78029.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport uuid from 'react-uuid';\r\n\r\n//reads in string array of badges from AT and displays custom-designed pills using programatically named classes from index.css\r\nclass BadgesOutput extends Component {\r\n    render() {\r\n        //first check if null\r\n        if(this.props.BadgesData) {\r\n            if(this.props.LegendCheck) {\r\n                return this.props.BadgesData.map((badge) => (\r\n                <Fragment key={uuid()}>\r\n                    {/*CSSify the badge name, for coloring and state for selecting and then display the badge */}\r\n                    <span\r\n                    data-name={badge}\r\n                    onClick={e => this.props.clickAction(e, this.props.CatName)}\r\n                    className={\"badge badge-pill \" + ((this.props.CatID[badge]) ? \"legend-button-active\" : \"legend-button-inactive\") + \" text-wrap \" + badge.toLowerCase().split(\" \").join(\"-\").replace(\"+\",\"plus\")}>\r\n                        {badge}\r\n                    </span>\r\n                    {\" \"}\r\n                </Fragment>\r\n                ));\r\n            } else {\r\n                // Badges for individual cards \r\n                return this.props.BadgesData.map((badge) => (\r\n                    <span key={uuid()} className={\"badge badge-pill text-wrap \" + badge.toLowerCase().split(\" \").join(\"-\").replace(\"+\",\"plus\")}>{badge}</span>\r\n                ));\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default BadgesOutput;","import React, { Component, Fragment } from 'react';\r\nimport BadgesOutput from './BadgesOutput';\r\n\r\n//sets up the legend of the page that takes in user input for filtering\r\nclass ATFilters extends Component {\r\n\r\n  render() {\r\n\r\n    //get the current state of each badge from the main constructor using object deconstructing\r\n    const { TypeOfActionCat, IntersectionalityCat, SubtopicCat, RecAudienceCat } = this.props.passingBadges;\r\n\r\n    //set up arrays to capture all unique badges to then set them up as \"buttons\" in the legend\r\n    const TypeOfActionTags = [];\r\n    const IntersectionalityTags = [];\r\n    const SubtopicTags = [];\r\n    const RecAudienceTags = [];\r\n    this.props.airtableData.map(card => {\r\n\r\n      card.fields.TypeOfAction.map(element => {\r\n        if (TypeOfActionTags.indexOf(element) === -1) {\r\n          TypeOfActionTags.push(element)\r\n        }\r\n      });\r\n\r\n      if (card.fields.Intersectionality) {\r\n        card.fields.Intersectionality.map(element => {\r\n          if (IntersectionalityTags.indexOf(element) === -1) {\r\n            IntersectionalityTags.push(element)\r\n          }\r\n        });\r\n      }\r\n\r\n      if (card.fields.Subtopic) {\r\n        card.fields.Subtopic.map(element => {\r\n          if (SubtopicTags.indexOf(element) === -1) {\r\n            SubtopicTags.push(element)\r\n          }\r\n        });\r\n      }\r\n\r\n      if (card.fields.RecAudience) {\r\n        card.fields.RecAudience.map(element => {\r\n          if (RecAudienceTags.indexOf(element) === -1) {\r\n            RecAudienceTags.push(element)\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"row\">\r\n          <div className=\"table-responsive\">\r\n            <table className=\"table table-bordered pill-matrix table-filters\">\r\n              <tbody>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    What content or action are you looking for?\r\n                  </th>\r\n                  <td id=\"filter-TypeOfAction\">\r\n                    <BadgesOutput BadgesData={TypeOfActionTags} LegendCheck={true} CatID={TypeOfActionCat} CatName={\"TypeOfActionCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    What intersections are you curious about?\r\n                  </th>\r\n                  <td id=\"filter-Intersectionality\">\r\n                    <BadgesOutput BadgesData={IntersectionalityTags} LegendCheck={true} CatID={IntersectionalityCat} CatName={\"IntersectionalityCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    What other issues are important you?\r\n                  </th>\r\n                  <td id=\"filter-Subtopic\">\r\n                    <BadgesOutput BadgesData={SubtopicTags} LegendCheck={true} CatID={SubtopicCat} CatName={\"SubtopicCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">\r\n                    Who are you looking to educate?\r\n                  </th>\r\n                  <td id=\"filter-RecAudience\">\r\n                    <BadgesOutput BadgesData={RecAudienceTags} LegendCheck={true} CatID={RecAudienceCat} CatName={\"RecAudienceCat\"} clickAction={this.props.clickAction} />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </ Fragment>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default ATFilters;","import React, { Component } from 'react';\r\nimport BadgesOutput from './BadgesOutput';\r\nimport Filters from './ATFilters';\r\n// import { render } from '@testing-library/react'; used only in testing environment\r\n\r\n//main filtering page\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        //initial constructor to take in input from airtable API...starts as blank\r\n        super(props);\r\n\r\n        //bind masterFilterListner so it can access state and props\r\n        this.masterFilterListner = this.masterFilterListner.bind(this);\r\n\r\n        //set state to include booleans for all badges\r\n        this.state = {\r\n            filteredCards: [],\r\n            passingBadges: {\r\n                TypeOfActionCat: {\r\n                    \"Action Guide\": false,\r\n                    Article: false,\r\n                    Book: false,\r\n                    \"Legal Services\": false,\r\n                    Movie: false,\r\n                    \"News Source\": false,\r\n                    Podcast: false,\r\n                    \"Short Video\": false,\r\n                    \"Support Businesses\": false,\r\n                    \"TV series\": false,\r\n                    \"Donation\": false,\r\n                    \"academic Paper\": false,\r\n                    \"Structured Learning\": false,\r\n                },\r\n                IntersectionalityCat: {\r\n                    \"LGBTQ+\": false,\r\n                    \"Feminist\": false,\r\n                    \"Indigenous Rights\": false,\r\n                    \"South Asian\": false\r\n                },\r\n                SubtopicCat: {\r\n                    Healthcare: false,\r\n                    \"Criminal Justice\": false,\r\n                    Immigration: false,\r\n                    \"Voting Rights\": false,\r\n                    \"Economic Inequality\": false,\r\n                    \"Environmental Justice\": false,\r\n                    \"Labor Rights\": false,\r\n                    \"Reproductive Rights\": false,\r\n                    \"Sexual Assault and Rape\": false,\r\n                    \"Mental Health\": false,\r\n                    \"Education\": false,\r\n                    \"Bail Funds\": false,\r\n                    Policing: false\r\n                },\r\n                RecAudienceCat: {\r\n                    Kids: false,\r\n                    \"Young Adults\": false,\r\n                    Teens: false,\r\n                    Parents: false\r\n                },\r\n                StarterCat: false\r\n            }\r\n        };\r\n    }\r\n\r\n    //Store all cards for future callbacks and toggling\r\n    fullAirtableCards = [];\r\n\r\n    //fetch all records from airtable DB using read-only API-key\r\n    componentDidMount() {\r\n        fetch('https://api.airtable.com/v0/appAPRM3pAfHUj3LP/Raw%20Database?api_key=keycv2X09Q0ghqQfu')\r\n            .then((resp) => resp.json())\r\n            .then(data => {\r\n                this.fullAirtableCards = data.records;\r\n                this.setState({ filteredCards: data.records });\r\n            }).catch(err => {\r\n                alert(\"There was an error pulling from the airtable DB\")\r\n            })\r\n    }\r\n\r\n    //function to edit boolean values on click of any badges\r\n    masterFilterListner = (e, cat) => {\r\n        console.log(\"Filter clicked\", e.target.dataset.name)\r\n        const name = e.target.dataset.name;\r\n        this.setState(prevState => ({\r\n            passingBadges: {\r\n                ...prevState.passingBadges,\r\n                [cat]: {\r\n                    ...prevState.passingBadges[cat],\r\n                    [name]: !prevState.passingBadges[cat][name]\r\n                },\r\n                \"StarterCat\": false\r\n            }\r\n        }));\r\n    };\r\n\r\n    //function that combines all boolean values to use on filtering\r\n    combinedFilters = () => {\r\n        const activatedBadges = {\r\n            TypeOfAction: [],\r\n            Intersectionality: [],\r\n            Subtopic: [],\r\n            RecAudience: [],\r\n            Starter: false\r\n        };\r\n\r\n        const { TypeOfActionCat, IntersectionalityCat, SubtopicCat, RecAudienceCat } = this.state.passingBadges;\r\n\r\n        //pull out the keys, which are the actual badge names, for anything that is true\r\n        for (let key in TypeOfActionCat) {\r\n            if (TypeOfActionCat[key]) {\r\n                activatedBadges.TypeOfAction.push(key);\r\n            }\r\n        };\r\n        for (let key in IntersectionalityCat) {\r\n            if (IntersectionalityCat[key]) {\r\n                activatedBadges.Intersectionality.push(key);\r\n            }\r\n        };\r\n        for (let key in SubtopicCat) {\r\n            if (SubtopicCat[key]) {\r\n                activatedBadges.Subtopic.push(key);\r\n            }\r\n        };\r\n        for (let key in RecAudienceCat) {\r\n            if (RecAudienceCat[key]) {\r\n                activatedBadges.RecAudience.push(key);\r\n            }\r\n        };\r\n\r\n        activatedBadges.Starter = this.state.passingBadges.StarterCat;\r\n\r\n        return activatedBadges;\r\n\r\n    }\r\n\r\n    multiPropsFilter = (cards, filters) => {\r\n\r\n        //special case if starter button is selected\r\n        if (filters[\"Starter\"]) {\r\n            return cards.filter(card => (card.fields[\"Starter\"]))\r\n        }\r\n        //normal iteration through different selector tags\r\n        const filterKeys = Object.keys(filters);\r\n        return cards.filter(card => {\r\n            return filterKeys.every(key => {\r\n                if (!filters[key].length) return true;\r\n\r\n                // Loops again if card[key] is an array (as is the case for almost all criteria)\r\n                if (Array.isArray(card.fields[key])) {\r\n                    return card.fields[key].some(keyEle => filters[key].includes(keyEle));\r\n                }\r\n                return filters[key].includes(card.fields[key]);\r\n            });\r\n        });\r\n    };\r\n\r\n    resetFilters() {\r\n\r\n        const resetBadges = { ...this.state.passingBadges }\r\n\r\n        //set temp variable to all false\r\n        Object.keys(resetBadges).forEach(cat => {\r\n\r\n            //starter is the only non-array cat, so avoid the double iteration\r\n            if (cat === \"StarterCat\") {\r\n                resetBadges[cat] = false;\r\n\r\n                //iterate to nested properties and set to false\r\n            } else {\r\n                Object.keys(resetBadges[cat]).forEach(i => resetBadges[cat][i] = false)\r\n            }\r\n        })\r\n\r\n        this.setState(\r\n            { passingBadges: resetBadges }\r\n        );\r\n    }\r\n\r\n    starterSelect() {\r\n\r\n        //remove any filters first\r\n        this.resetFilters()\r\n\r\n        //set up copy variable\r\n        const resetBadges = { ...this.state.passingBadges }\r\n\r\n        resetBadges.StarterCat = true;\r\n\r\n        this.setState(\r\n            { passingBadges: resetBadges }\r\n        );\r\n\r\n    }\r\n\r\n    render() {\r\n        //prevents rendering too early\r\n        if (this.state.filteredCards === null) return null;\r\n\r\n        return (\r\n\r\n            //begin filter section\r\n            <div className=\"container mt-5\">\r\n                <h1>Build your plan <small className=\"text-muted vsmall\">Click on any tag to filter, use our starter kit, or just scroll</small></h1>\r\n\r\n                <div className=\"cotainer mb-3\">\r\n\r\n                    <Filters airtableData={this.fullAirtableCards} passingBadges={this.state.passingBadges} clickAction={this.masterFilterListner} />\r\n\r\n                    <div className=\"btn-toolbar row\">\r\n                        <div className=\"offset-4\">\r\n                            <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={() => this.starterSelect()} id=\"#\">Show me some starters!</button>\r\n\r\n                            <button type=\"button\" className=\"btn btn-secondary mx-1\" onClick={() => this.resetFilters()} id=\"#\">Reset</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* begin main section returning cards, using the filtering function to pass all the filters to the full list of cards every time */}\r\n                <FadeInDiv>\r\n                    <h1 className=\"mt-5\">Resources to educate and act <small className=\"text-muted vsmall\">Click on any image to go to the site</small></h1>\r\n                </FadeInDiv>\r\n\r\n                <div className=\"row row-cols-1 row-cols-lg-4 card-matrix mt-4\">\r\n                    {this.multiPropsFilter(this.fullAirtableCards, this.combinedFilters()).map(resource => <ResourceCard {...resource.fields} />)}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n\r\n//add fading effects to any div on view\r\nfunction FadeInDiv(props, key) {\r\n\r\n    //set variables to capture visibility state\r\n    const [isVisible, setVisible] = React.useState(false);\r\n    const domRef = React.useRef(null);\r\n\r\n    //instantize new observer for each element and trigger it when there is some change to the dom\r\n    React.useEffect(() => {\r\n        const observer = new IntersectionObserver(entries => {\r\n            entries.forEach(entry => setVisible(entry.isIntersecting));\r\n        });\r\n\r\n        //observe the change in the dom\r\n        observer.observe(domRef.current);\r\n        //unmount observer after the change is dom\r\n        return () => observer.unobserve(domRef.current);\r\n    });\r\n\r\n    return (\r\n        <div key={key} ref={domRef} className={\"col mb-4 fader \" + (isVisible ? \"is-visible\" : \"\")}>{props.children}</div>\r\n    );\r\n}\r\n\r\nconst ResourceCard = ({ Title, TypeOfAction, Link, ShortDescription, Intersectionality, RecAudience, Starter, Subtopic, ImageURL, Index}) => (\r\n    <FadeInDiv key={Index}>\r\n        {/* Each type of action has been coded to a particular card color...grab the color of the first type of action that comes up*/}\r\n        <div className={\"card h-100 card-highlights \" + (TypeOfAction[0].toLowerCase().split(\" \").join(\"-\").replace(\"+\", \"plus\"))}>\r\n            <a href={Link} target=\"_blank\" rel=\"noopener\">\r\n                <img className=\"card-img-top\" src={ImageURL} alt={\"Website preview for \" + { Title }} />\r\n            </a>\r\n\r\n            <div className=\"card-body\">\r\n                <a href={Link} target=\"_blank\" re=\"noopener\" className=\"card-title-link\">\r\n                    <h5 className=\"card-title\">{Title + \" \"}\r\n                        {/* Apply starter badge if starter is checked */}\r\n                        <small className={\"badge badge-dark \" + (Starter ? \"\" : \"d-none\")}> STARTER</small>\r\n                    </h5>\r\n                </a>\r\n                {/* Collapsable version (show only if text is long enough and screen size is big enough) */}\r\n                <div className={\"descriptionText d-none \" + ((ShortDescription.length < 106) ? \"\" : \"d-lg-block d-xl-block\")}>\r\n                    <p className=\"card-text collapse\" id={\"descriptionContent\" + Index} aria-expanded=\"false\">{ShortDescription}</p>\r\n                    <a href={\"#descriptionContent\" + Index} data-toggle=\"collapse\" className=\"collapsed\" aria-expanded=\"false\" aria-controls=\"descriptionContent\">\r\n                        <span className=\"readMore\">+Show More</span>\r\n                        <span className=\"readLess\">-Show Less</span>\r\n                    </a>\r\n                </div>\r\n\r\n                {/* Full version (show if text is short and/or screen size is iPad  or lower) */}\r\n                <div className={\"descriptionText \" + ((ShortDescription.length < 106) ? \"d-block\" : \"d-block d-lg-none\")}>\r\n                    <p className=\"card-text\">{ShortDescription}</p>\r\n                </div>\r\n\r\n                <div className=\"pill-matrix pt-3 pill-border-rows\">\r\n                    <div className=\"border-top pt-3 border-bottom\">\r\n                        <p className=\"font-weight-bold\">Intersectionality: {\"  \"}\r\n                            <BadgesOutput BadgesData={Intersectionality} LegendCheck={false} />\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"pt-3 border-bottom\">\r\n                        <p className=\"font-weight-bold\">Subtopic: {\"  \"}\r\n                            <BadgesOutput BadgesData={Subtopic} LegendCheck={false} />\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"pt-3 border-bottom\">\r\n                        <p className=\"font-weight-bold\">Action Type: {\"  \"}\r\n                            <BadgesOutput BadgesData={TypeOfAction} LegendCheck={false} />\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"pt-3 border-bottom\">\r\n                        <p className=\"font-weight-bold\">Rec. Audience: {\"  \"}\r\n                            <BadgesOutput BadgesData={RecAudience} LegendCheck={false} />\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </FadeInDiv>\r\n);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navigation = () => (\r\n    <nav className=\"navbar sticky-top navbar-expand-lg navbar-light bg-nav-custom\">\r\n        <div className=\"container\">\r\n            <a className=\"navbar-brand font-italic\" href=\"/\">An Antiracism Project</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            {/* use NavLink to allow for activeClass to change depending on what page we are on */}\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                {/* left-align these components with mr-auto */}\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink exact activeClassName=\"active\" className=\"nav-link\" to=\"/\">Home</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to=\"/fullList\">Full Data Table</NavLink>\r\n                    </li>\r\n                </ul>\r\n                {/* Make this stand out as another button */}\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"btn btn-primary\" to=\"/submitEntry\">Submit an Entry</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n)\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\n//static airtable page\r\nclass fullList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <h1>Explore all resources\r\n                    <small class=\"vsmall text-muted\">  Airtable only lets us show 100 on our homepage :(</small>\r\n                    </h1>\r\n                    <p>These are all the resources categorized to date.  Help us out by submitting <a href=\"/submitEntry\">other recommendations</a></p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <iframe title=\"airtable list\" className=\"airtable-embed airTable-embed-view\" src=\"https://airtable.com/embed/shrcTZxNFB1e55pen?backgroundColor=blue&viewControls=on\" frameborder=\"0\" onmousewheel=\"\"></iframe>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default fullList;","import React from \"react\";\r\n\r\n//static page to hold airTable form\r\nclass submitEntry extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <h1>Contribute to the community</h1>\r\n                    <p>This project was built by a community with the hopes of bringing together a better community. If you have suggestions, we'd love to hear from you!</p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <script src=\"https://static.airtable.com/js/embed/embed_snippet_v1.js\"></script><iframe title=\"airtable submit form\" class=\"airtable-embed airtable-dynamic-height airTable-form-view\" src=\"https://airtable.com/embed/shr0Mly7UD0cne35m?backgroundColor=blue\" frameborder=\"0\" onmousewheel=\"\"></iframe>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default submitEntry;","import React, { Component } from 'react';\nimport homePage from './Home';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Navigation from './NavBar';\nimport listPage from './fullList.js';\nimport submitPage from './submitEntry';\n// import { render } from '@testing-library/react'; for testing\n\nclass App extends Component {\n  render() {\n    return (\n      //Navbar\n      <HashRouter>\n        <Navigation />\n\n        <Switch>\n          <Route exact path=\"/\" component={homePage} />\n          <Route path=\"/fullList\" component={listPage} />\n          <Route path=\"/submitEntry\" component={submitPage} />\n        </Switch>\n\n      </HashRouter>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//import Bootstrap 4.0\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/js/bootstrap.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}